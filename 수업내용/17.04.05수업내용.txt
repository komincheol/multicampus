
# 용어

  - Data vs Information
  - Database
  - DBMS

  - 관계형데이터베이스(SQL Database) = Table(자료구조) + SQL(입출력명령)

# 실습 환경 설정

  1.Instant Client 다운로드 및 설정

    - http://www.oracle.com/technetwork/database/features/instant-client/index-097480.html

    C:\Users\student> notepad ic.bat

    set path=C:\instantclient_12_1;%path%
     sqlplus dream01/catcher@70.12.50.50:1521/XE

    C:\Users\student> ic

    SQL> show user
    USER is "DREAM01" 

    SQL> select * from tab;

    SQL> ed r.sql

    select no as you
    from (select level as no
          from dual
          connect by level <= 24
          order by dbms_random.value)
    where rownum = 1;

    SQL> @r

  2.실습용 테이블 생성

    - http://cafe.naver.com/n1books/11 포스트에 첨부된 creobjects.sql, demobld.sql 다운로드

    C:\Users\student> ic

    SQL> @C:\Users\student\Desktop\creobjects.sql   -- EMPLOYEES 등 생성
    SQL> @C:\Users\student\Desktop\demobld.sql      -- EMP 등 생성

    C:\Users\student> ic

    SQL> select * from tab;
    SQL> select * from dept;

    SQL> show all

    linesize 80
    pagesize 14

    SQL> select * from emp;

    SQL> set linesize 200 
    SQL> set pagesize 40

    SQL> list     -- 또는 l

    SQL> run
    SQL> r
    SQL> /

  3.SQL Developer 다운로드 설치

    - SQL*Plus List of Unsupported Commands and Features
    - http://www.oracle.com/technetwork/developer-tools/sqlcl/downloads/sqlcl-relnotes-421-3415922.html?printOnly=1#sqlplus


# SQL

  https://en.wikipedia.org/wiki/SQL#Queries

# SQL 분류

  - DDL : CREATE, ALTER, DROP, RENAME, TRUCATE, COMMENT
  - DML : INSERT, UPDATE, DELETE, MERGE, SELECT
  - TCL : COMMIT, ROLLBACK, SAVEPOINT
  - DCL : GRANT, REVOKE

# SELECT 이해

  - 검색, 조회, 질의, ...
  - Queries allow the user to describe desired data.

  select empno, ename, sal, job
  from emp;

  select sal, sal, sal, sal    -- 컬럼 복제
  from emp;

  select sum(sal), avg(sal), max(sal), min(sal)
  from emp;

  select empno, ename, sal, sal*1.3
  from emp;

# SELECT Statement
  
  * SELECT 문장을 작성하거나 해석할 때 권장 순서 (절대 실행순서 아님)

  SELECT   deptno, sum(sal)  -- 4 (mandatory)
  FROM     emp               -- 1 (mandatory)
  WHERE    sal >= 1000       -- 2
  GROUP BY deptno            -- 3 
  HAVING   sum(sal) >= 2000  -- 5
  ORDER BY deptno            -- 6
  ;

# Where절 이해

  * candidate row를 검증해서 T, F, N 가운데 하나를 리턴하는 절인데
    where절이 T를 리턴해야 후보행(candidate row)이 리턴된다.

  select * from emp where sal >= 1500;
  select * from emp where sal >= 1500 and job = 'SALESMAN';

  select * from emp where comm = null;   -- 엉터리
  select * from emp where comm is null;  -- 제대로

  select ename, lower(ename), sal, sal * 1.2
  from emp
  where sal >= 1000;

# Join

  * 용어

    select *
    from emp e, dept d            -- Join Statement
    where e.deptno = d.deptno     -- Join Predicate
    and e.sal >= 1000             -- Non-Join Predicate
    and e.job = 'MANAGER'         -- Non-Join Predicate
    and d.deptno = 10             -- Non-Join Predicate(Single-Row Predicate)
    order by 1;

  * Syntax

    [1] Oracle Syntax 

        - Equi join
        - NonEqui join
        - Self join
        - Outer join

    [2] SQL:1999 Syntax

        - Cross join
        - Natural join
        - Join Using
        - Join On
        - Outer join

  * 조인은 곱셈 연산이다!

    select count(*)
    from (select level as no from dual connect by level <= 100),
         (select level as no from dual connect by level <= 100),
         (select level as no from dual connect by level <= 100);

# Join >> Oracle Syntax 

 (1) Equi join

  select *
  from emp, dept
  order by 1;

  select *
  from emp e, dept d
  where e.deptno = d.deptno
  order by 1;

 (2) NonEqui join

  select *
  from emp, salgrade
  order by 1;

  select *
  from emp e, salgrade s
  where e.sal >= s.losal and e.sal <= s.hisal
  order by 1;

  select s.grade, count(*), avg(e.sal)
  from emp e, salgrade s
  where e.sal >= s.losal and e.sal <= s.hisal
  group by s.grade
  order by grade desc;

 (3) Self join
  
  select *
  from emp w, emp m
  order by 1;

  select *
  from emp w, emp m
  where w.mgr = m.empno
  order by 1;

  select w.empno, w.ename, m.empno, m.ename
  from emp w, emp m
  where w.mgr = m.empno
  order by 1;

  cf.상호 관련 서브쿼리로 해결

     select empno, ename, mgr, (select ename from emp where empno = e.mgr) as ename
     from emp e; 

 (4) Outer join

  select *
  from emp w, emp m
  where w.mgr = m.empno (+)
  order by 1;

# 문제.누적합 구하기

         A          B      누적
  -------- ---------- ---------
      7369        800       800
      7499       1600      2400
      7521       1250      3650

  drop table t1;

  create table t1 
  as 
  select empno c1, sal c2
  from emp
  where rownum <= 3;

  select *
  from t1;

  select *
  from t1 a, t1 b;

  select *
  from t1 a, t1 b
  where a.c1 >= b.c1
  order by 1, 2;

  select a.c1, a.c2, sum(b.c2) as cumulative
  from t1 a, t1 b
  where a.c1 >= b.c1
  group by a.c1, a.c2
  order by 1, 2;

# Cartesian Product는 항상 나쁘다??!!

  select deptno, job, sum(sal)
  from emp
  group by deptno, job
  union all
  select deptno, null, sum(sal)
  from emp
  group by deptno
  union all
  select null, null, sum(sal)
  from emp
  order by 1, 2;

     ---

  select *
  from (select deptno, job, sum(sal) as sum_sal
        from emp
        group by deptno, job) e,
       (select level as no
        from dual
        connect by level <= 3) n
  order by n.no;

  select decode(n.no, 1, deptno, 2, deptno) as deptno,
         job, 
         sum_sal,
         no
  from (select deptno, job, sum(sal) as sum_sal
        from emp
        group by deptno, job) e,
       (select level as no
        from dual
        connect by level <= 3) n
  order by n.no;

  select decode(n.no, 1, deptno, 2, deptno) as deptno,
         decode(n.no, 1, job) as job,
         sum_sal,
         no
  from (select deptno, job, sum(sal) as sum_sal
        from emp
        group by deptno, job) e,
       (select level as no
        from dual
        connect by level <= 3) n
  order by n.no;

  select decode(n.no, 1, deptno, 2, deptno) as deptno,
         decode(n.no, 1, job) as job,
         sum(sum_sal)
  from (select deptno, job, sum(sal) as sum_sal
        from emp
        group by deptno, job) e,
       (select level as no
        from dual
        connect by level <= 3) n
  group by decode(n.no, 1, deptno, 2, deptno),
           decode(n.no, 1, job)
  order by 1, 2;

     ---

  select deptno, job, sum(sal)
  from emp
  group by rollup(deptno, job);

# desc.sql

  SQL> ed desc.sql

       set linesize 50
       desc &1
       set linesize 200

  SQL> @desc emp

# View

  - Named Select! 
  - Query Transformation

  create or replace view v1
  as
  select empno, ename
  from emp
  where deptno = 10;

  select *
  from v1
  where ename like 'A%';
 
# print_table 프로시져

  - http://cafe.naver.com/n1books/14 첨부 파일 다운로드

  SQL> @"C:\Users\student\Desktop\print_table .sql"

  SQL> set serveroutput on 
  SQL> exec print_table('select * from employees')

  SQL> exec pt('select * from employees')
  SQL> exec pt('select * from emp where ename = ''ALLEN'' ')

  SQL> create or replace view v1
       as
       select e.empno, e.ename, d.*
       from emp e, dept d
       where e.ename like 'A%'
       and d.deptno = 10;

  SQL> exec pt('select * from v1')

# 1-11 

  가공 -> 연산 - 산술
               - 연결
               - 논리
               - ...

       -> 함수 - Vendor-supplied function - Single-row function
                                          - Multiple-row function
               - User-defined function    - Single-row function
                                          - Multiple-row function

# 1-15

  select empno, 
         sal, 
         comm, 
         sal*12 + nvl(comm, 0)    ann_sal, 
         sal*12 + nvl(comm, 0) as ann_sal,
         sal*12 + nvl(comm, 0)    "$Ann Sal"
  from emp;

# 1-20 concatenation operator, literal

  select empno, ename||' is a '||job as sawon
  from emp;

  select empno,
         'Dear '||ename||'! '||chr(10)||
         'your salary from '||sal||' to '||sal*1.2 as kidding
  from emp;

  select 'drop table '||tname||
         ' cascade constrants;' as commands
  from tab
  where tname like 'E%';

# 1-23

  select ename||'''s house is bigger than Tom''s'     from emp;
  select ename||q'!'s house is bigger than Tom's!' from emp;
  select ename||q'X's house is bigger than Tom'sX' from emp;

# 1-24

  select unique   deptno from emp;
  select distinct deptno from emp;

  select distinct deptno, job
  from emp
  order by 1, 2;

  select empno, sal as salary
  from emp
  where salary > 1000;

# 2-11

  select * from emp
  where mgr = 7698;

  select * from emp
  where mgr = 7839;

  select * from emp
  where mgr = 7788;

    ---

  select * from emp
  where mgr = 7698
  union all
  select * from emp
  where mgr = 7839
  union all
  select * from emp
  where mgr = 7788;

    ---

  select * from emp
  where mgr in (7698, 7839, 7788);

  select * from emp
  where mgr = 7698 or mgr = 7839 or mgr = 7788;


  select * from emp
  where mgr not in (7698, 7839, 7788);

  select * from emp
  where mgr != 7698 and mgr != 7839 and mgr != 7788;

# 2-12

  select * from emp
  where ename like 'A%';

  select * from emp
  where ename like '_____';

   ---

  >> 중간에 포함된 A_A 찾기

  drop table t1 purge;

  create table t1 (col1 varchar2(30));

  insert into t1 values ('AAA');
  insert into t1 values ('ABA');
  insert into t1 values ('ACA');
  insert into t1 values ('A_A');

  commit;

  select * from t1 where col1 like '%A_A%';              -- 엉터리
  select * from t1 where col1 like '%A!_A%' escape '!';  -- 제대로

# 2-14

  select * from emp where comm = null;    -- 엉터리
  select * from emp where comm is null;   -- 제대로

  cf.

     select * from emp where empno = empno;
     select * from emp where comm = comm;

# 2-23

  select empno, ename, sal salary from emp order by sal;
  select empno, ename, sal salary from emp order by salary;
  select empno, ename, sal salary from emp order by 3;

  select empno, ename, sal salary from emp order by hiredate;

  select deptno, ename, sal from emp order by deptno, sal desc;

  select * from emp order by comm;
  select * from emp order by comm nulls first;

  select * from emp order by comm desc;
  select * from emp order by comm desc nulls last;

# 실습

  문제.월별 정렬 (가공한 결과에 의한 Order by)

    select empno, hiredate, to_char(hiredate, 'MM')
    from emp;

    select empno, hiredate, to_char(hiredate, 'MM')
    from emp
    order by to_char(hiredate, 'MM');

    select empno, hiredate
    from emp
    order by to_char(hiredate, 'MM');

  문제.SQL Yellow p.117 상단

    select to_char(hiredate, 'day') 
    from emp
    where rtrim(to_char(hiredate, 'day')) = 'tuesday';

    select to_char(hiredate, 'day') 
    from emp
    where to_char(hiredate, 'day') like 'tues%';

  문제.jb 출제

    select empno, sal, sal*1.1, s.*
    from emp e, salgrade s
    order by 1;

    select e.empno, 
           e.sal, 
           s.grade
    from emp e, salgrade s
    where e.sal >= s.losal and e.sal <= s.hisal
    order by 1;

    select e.empno, 
           e.sal, 
           (select grade 
            from salgrade s
            where e.sal >= s.losal and e.sal <= s.hisal) ret1,
           e.sal*1.1, 
           (select grade 
            from salgrade s
            where e.sal*1.1 >= s.losal and e.sal*1.1 <= s.hisal) ret2        
    from emp e
    order by 1;

    select *
    from (select e.empno, 
                 e.sal, 
                (select grade 
                 from salgrade s
                 where e.sal >= s.losal and e.sal <= s.hisal) ret1,
                 e.sal*1.1, 
                (select grade 
                 from salgrade s
                 where e.sal*1.1 >= s.losal and e.sal*1.1 <= s.hisal) ret2        
          from emp e)
    where ret1 != ret2
    order by 1;

# 읽기 일관성, Lock 및 Deadlock


  [Session 1]                  [Session 2]

  * 읽기 일관성

  drop table books purge; 

  create table books
  (no number,
   name varchar2(10));

  insert into books
  values (1000, 'ABC');

  insert into books
  values (2000, 'SQL');

  select * from books;

                               select * from books;

  commit;

                               select * from books;

  * Lock

  update books
  set name = 'JAVA'
  where no = 1000;

  select * from books;
                               update books
                               set name = 'JAVA'
                               where no = 1000;
                               | waiting!

  commit;

                               commit;

  * Deadlock

  update books
  set name = 'SQL'
  where no = 1000;

                               update books
                               set name = 'SUN'
                               where no = 2000;

  update books
  set name = 'C++'
  where no = 2000;
  | waiting!
                               update books
                               set name = 'Solaris'
                               where no = 1000;
                               | waiting!

  ORA-00060: deadlock detected 
  while waiting for resource

  rollback;



















